// <auto-generated />
using System;
using Microlab.web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Webyeste.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250917225113_AddResultadoExameTables")]
    partial class AddResultadoExameTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microlab.web.Models.Entities.AnaliseQuimica", b =>
                {
                    b.Property<Guid>("AnaliseQuimicaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AcidoAscorbico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bilirrubina")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorposCetonicos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Glicose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hemoglobina")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Leococitos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nitrito")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Obs_AnaliseQuimica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Proteinas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResultadoExameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sangue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Urobilinogenio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnaliseQuimicaId");

                    b.HasIndex("ResultadoExameId")
                        .IsUnique();

                    b.ToTable("AnalisesQuimicas");
                });

            modelBuilder.Entity("Microlab.web.Models.Entities.CaractereFisico", b =>
                {
                    b.Property<Guid>("CaractereFisicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Aspecto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Densidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Obs_Caraterfisico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Odor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PH")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResultadoExameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Volume")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CaractereFisicoId");

                    b.HasIndex("ResultadoExameId")
                        .IsUnique();

                    b.ToTable("CaracteresFisicos");
                });

            modelBuilder.Entity("Microlab.web.Models.Entities.Clinica", b =>
                {
                    b.Property<Guid>("ClinicaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClinicaId");

                    b.ToTable("Clinicas");
                });

            modelBuilder.Entity("Microlab.web.Models.Entities.Exame", b =>
                {
                    b.Property<Guid>("ExameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataDigitacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataSolicitacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Digitador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metodo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NmExame")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ExameId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Exames");
                });

            modelBuilder.Entity("Microlab.web.Models.Entities.Negativo", b =>
                {
                    b.Property<Guid>("NegativoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Helmintos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LarvasEncontradas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Protozoarios")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResultadoExameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NegativoId");

                    b.HasIndex("ResultadoExameId")
                        .IsUnique();

                    b.ToTable("Negativos");
                });

            modelBuilder.Entity("Microlab.web.Models.Entities.Paciente", b =>
                {
                    b.Property<Guid>("PacienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataSolicitacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QtdExames")
                        .HasColumnType("int");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Solicitante")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PacienteId");

                    b.HasIndex("ClinicaId");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("Microlab.web.Models.Entities.ResultadoExame", b =>
                {
                    b.Property<Guid>("ResultadoExameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataResultado")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ObservacaoGeral")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StatusResultado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResultadoExameId");

                    b.HasIndex("ExameId");

                    b.ToTable("ResultadoExames");
                });

            modelBuilder.Entity("Microlab.web.Models.Entities.Sedimentoscopia", b =>
                {
                    b.Property<Guid>("SedimentoscopiaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bacterias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CelulasEpiteliais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cilindros")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cristais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hemacias")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Leucocitos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Obs_Sedimentoscopia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResultadoExameId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SedimentoscopiaId");

                    b.HasIndex("ResultadoExameId")
                        .IsUnique();

                    b.ToTable("Sedimentoscopias");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microlab.web.Models.Entities.AnaliseQuimica", b =>
                {
                    b.HasOne("Microlab.web.Models.Entities.ResultadoExame", "ResultadoExame")
                        .WithOne("AnaliseQuimica")
                        .HasForeignKey("Microlab.web.Models.Entities.AnaliseQuimica", "ResultadoExameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResultadoExame");
                });

            modelBuilder.Entity("Microlab.web.Models.Entities.CaractereFisico", b =>
                {
                    b.HasOne("Microlab.web.Models.Entities.ResultadoExame", "ResultadoExame")
                        .WithOne("CaracteresFisicos")
                        .HasForeignKey("Microlab.web.Models.Entities.CaractereFisico", "ResultadoExameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResultadoExame");
                });

            modelBuilder.Entity("Microlab.web.Models.Entities.Exame", b =>
                {
                    b.HasOne("Microlab.web.Models.Entities.Paciente", "Paciente")
                        .WithMany("Exames")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Microlab.web.Models.Entities.Negativo", b =>
                {
                    b.HasOne("Microlab.web.Models.Entities.ResultadoExame", "ResultadoExame")
                        .WithOne("Negativo")
                        .HasForeignKey("Microlab.web.Models.Entities.Negativo", "ResultadoExameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResultadoExame");
                });

            modelBuilder.Entity("Microlab.web.Models.Entities.Paciente", b =>
                {
                    b.HasOne("Microlab.web.Models.Entities.Clinica", "Clinica")
                        .WithMany("Pacientes")
                        .HasForeignKey("ClinicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clinica");
                });

            modelBuilder.Entity("Microlab.web.Models.Entities.ResultadoExame", b =>
                {
                    b.HasOne("Microlab.web.Models.Entities.Exame", "Exame")
                        .WithMany()
                        .HasForeignKey("ExameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exame");
                });

            modelBuilder.Entity("Microlab.web.Models.Entities.Sedimentoscopia", b =>
                {
                    b.HasOne("Microlab.web.Models.Entities.ResultadoExame", "ResultadoExame")
                        .WithOne("Sedimentoscopia")
                        .HasForeignKey("Microlab.web.Models.Entities.Sedimentoscopia", "ResultadoExameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResultadoExame");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microlab.web.Models.Entities.Clinica", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("Microlab.web.Models.Entities.Paciente", b =>
                {
                    b.Navigation("Exames");
                });

            modelBuilder.Entity("Microlab.web.Models.Entities.ResultadoExame", b =>
                {
                    b.Navigation("AnaliseQuimica")
                        .IsRequired();

                    b.Navigation("CaracteresFisicos")
                        .IsRequired();

                    b.Navigation("Negativo")
                        .IsRequired();

                    b.Navigation("Sedimentoscopia")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
